init = xx %*% init
init = xx %*% init
init = xx %*% init
init = xx %*% init
init = xx %*% init
init = xx %*% init
init = xx %*% init
init = xx %*% init
init = xx %*% init
init = xx %*% init
init = xx %*% init
init = xx %*% init
init = xx %*% init
init/ sum(init)
sum(bb$vectors[,1] * bb$vectors[,3])
sum(bb$vectors[,1] * bb$vectors[,4])
sum(bb$vectors[,2] * bb$vectors[,4])
sum(bb$vectors[,2] * bb$vectors[,3])
bb$vectors
init = c(1,1,1,1)
init = xx %*% init
init
init = c(1,2,3,4)
init = xx %*% init
init
aa = bb$vectors[,1] + 2*bb$vectors[,2]
aa
aa = xx %*% aa
aa = xx %*% aa
aa = xx %*% aa
aa = xx %*% aa
aa = xx %*% aa
aa = xx %*% aa
aa = xx %*% aa
aa = xx %*% aa
aa = xx %*% aa
bb = aa
aa = c(1,2,3,4)
aa = xx %*% aa
aa = xx %*% aa
aa = xx %*% aa
aa = xx %*% aa
aa = xx %*% aa
aa = xx %*% aa
aa = xx %*% aa
aa = xx %*% aa
aa = xx %*% aa
aa = xx %*% aa
aa = xx %*% aa
aa = xx %*% aa
aa = xx %*% aa
aa = xx %*% aa
aa = xx %*% aa
aa = xx %*% aa
aa = xx %*% aa
c(3,3, 1,5)
a = c(3,3, 1,5)
a = xx %*% a
bb = eigen(xx)$vectors
a * bb[,1]
sum(a * bb[,1])
sum(a * bb[,2])
sum(a * bb[,3])
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = c(1,1,1000, 1000)
a = xx %*% a
sum(a * bb[,1])
sum(a * bb[,2])
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
sum(a * bb[,1])
sum(a * bb[,2])
a = xx %*% a
a = xx %*% a
a = xx %*% a
a
a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a
sum(a * bb[,1])
bb
sum(a * bb[,3])
sum(a * bb[,4])
a = c(1,1, 3,3)
sum(a * bb[,4])
sum(a * bb[,3])
a = c(1,1, 3,4)
sum(a * bb[,3])
sum(a * bb[,4])
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
sum(bb[,1], bb[,3])
sum(bb[,1], bb[,4])
bb
sum(bb[,1] * bb[,4])
sum(bb[,1] * bb[,3])
a = c(1, 1, 3,3)
sum(a, bb[,1])
sum(a * bb[,1])
sum(a * bb[,2])
sum(a * bb[,3])
sum(a * bb[,4])
a = c(1, 1, 77,77)
sum(a * bb[,3])
sum(bb[,2] * bb[,4])
sum(bb[,2] * bb[,3])
sum(bb[,1] * bb[,3])
a = xx %*% a
sum(a * bb[,3])
a = xx %*% a
sum(a * bb[,3])
a = xx %*% a
sum(a * bb[,3])
a = xx %*% a
sum(a * bb[,3])
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
sum(a * bb[,3])
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
sum(a * bb[,3])
sum(a * bb[,4])
sum(a * bb[,1])
sum(a * bb[,2])
sum(bb[,1] * bb[,2])
sum(bb[,1] * bb[,4])
eigen(xx)
a = c(5,5,7,7)
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a = xx %*% a
a
a/sum(a)
bb
x = c(0 ,1, 0, 0, 0, 0.5, 0, 0.5, 0, 0, 0, 0, 0.5, 0, 0.5, 0, 0, 0, 0.5, 0, 0.5, 0, 0, 0, 1, 0)
length(x)
x
x = x [-11]
xx = matrix(x, ncol = 5)
xx
eigen(xx)
xx = cbind(xx, c(0, 0, 0, 0, 1, 0))
xx = cbind(xx, c(0, 0, 0, 0, 1))
xx
xx = xx[, 1:6]
xx
xx = rbind(xx, c(0, 0, 0, 0, 0.5, 0))
xx
xx[4, 5] = 0.5
xx
eigen(xx)
dat = matrix(n*n)
n = 7
dat = matrix(n*n)
getmat = function(n)
{
dat = matrix(n*n)
for(i in 1:n)
{
if(i == 1)dat[2,1] = 1
else if(i == n)dat[n-1, n] = 1
else{
dat[i -1, i] = 0.5
dat[ i+1, i] = 0.5
}
}
dat
}
getmat(7)
getmat = function(n)
{
dat = matrix(n*n)
for(i in 1:n)
{
if(i == 1)dat[2,1] = 1
else{ if(i == n)dat[n-1, n] = 1
else{
dat[i -1, i] = 0.5
dat[ i+1, i] = 0.5
}
}
}
dat
}
getmat(7)
getmat = function(n)
{
dat = matrix(n*n)
for(i in 2:(n-1))
{
dat[i -1, i] = 0.5
dat[ i+1, i] = 0.5
}
dat
}
getmat(7)
getmat = function(n)
{
dat = matrix(0, nrow = n, ncol = n)
for(i in 2:(n-1))
{
dat[i -1, i] = 0.5
dat[ i+1, i] = 0.5
}
dat
}
getmat(7)
getmat = function(n)
{
dat = matrix(0, nrow = n, ncol = n)
for(i in 2:(n-1))
{
dat[i -1, i] = 0.5
dat[ i+1, i] = 0.5
}
dat[2,1] = 1
dat[n-1, n] = 1
dat
}
getmat(7)
eigen(getmat(7))$values
eigen(getmat(20))$values
eigen(getmat(100))$values
0.08*(92 + 89 + 68/70 + 36 * 40 + 88/90) + 0.125*(90 + 76/120) + 17.5*(100 + 75/160)
0.08*(92 + 89 + 68/70 + 36 * 40 + 88/90) + 0.125*(90 + 76/120) + 0.175*(100 + 75/160)
0.08*(0.92 + 0.89 + 68/70 + 0.36 * 0.4 + 88/90) + 0.125*(0.9 + 76/120) + 0.175*(1 + 75/160)
0.08*(0.92 + 0.89 + 68/70 + 0.36 * 0.4 + 88/90) + 0.125*(0.9 + 110/120) + 0.175*(1 + 75/160)
0.08*(0.92 + 0.89 + 68/70 + 0.36 * 0.4 + 88/90) + 0.125*(0.9 + 110/120) + 0.175*(1 + 100/160)
0.08*(0.92 + 0.89 + 68/70 + 0.36/0.4 + 88/90) + 0.125*(0.9 + 76/120) + 0.175*(1 + 75/160)
0.08*(0.92 + 0.89 + 68/70 + 0.36/0.4 + 88/90) + 0.125*(0.9 + 76/120) + 0.175*(0.9 + 75/160)
quit()
0.6*98 + 0.4 * 78
setwd('~/Documents/Kaggle/nile_virus/scripts/')
aa = read.csv('merge_with_previous_GAM.csv')
bb = read.csv('merged_sample_Corrected_NumMosquitos_GAM.csv')
plot(aa[,2], bb[,2])
submission = aa
submission[,2] = 0.5 * aa[,2] + 0.5 * bb[,2]
plot(submission[,2])
write.csv(submission, 'corrected_nummosq_GAM_merge_with_previous_GAM_combine.csv', row.names = F, quote = F)
aa= read.csv('new_plus_0.802_GAM.csv')
bb = read.csv('without_nummosq2.csv')
submission[,2] = 0.7 * aa[,2] + 0.3*bb[,2]
plot(submission)
write.csv(submission, 'Highest_rf_plus_0.807model.csv', row.names = F, quote = F)
setwd('~/Documents/Kaggle/nile_virus/scripts/')
options(scipen = 999) # no scientific number
library(randomForest)
library(geosphere)
install.packages('randomForest')
library(randomForest)
library(lubridate)
install.packages('lubridate')
library(lubridate)
library(AUC)
install.packages('AUC')
library(AUC)
library(FNN) # For knn.reg imputation
install.packages('FNN')
library(FNN) # For knn.reg imputation
library(plyr)
library(gbm)
library(zoo)
library(mgcv) # GAM model
library(ggplot2)
install.packages('gbm')
install.packages('zoo')
library(gbm)
library(zoo)
station1 = c(41.995, -87.933)
station2 = c(41.786, -87.752)
weather = read.csv('../input//weather.csv')
dat = read.csv('../input/train.csv')
dat$Date = ymd(dat$Date)
dat$WnvPresent = as.factor(dat$WnvPresent)
weather$Date = ymd(weather$Date)
dat$Station =
ifelse(distHaversine(dat[,c('Latitude', 'Longitude')], station1) <
distHaversine(dat[,c('Latitude', 'Longitude')], station2),
1, 2)
install.packages('geoshpere')
install.packages('geosphere')
library(geosphere)
dat$Station =
ifelse(distHaversine(dat[,c('Latitude', 'Longitude')], station1) <
distHaversine(dat[,c('Latitude', 'Longitude')], station2),
1, 2)
temp = merge(dat, weather)
temp$month = month(temp$Date)
temp$week = week(temp$Date)
temp$year = year(temp$Date) ## Seems like recent year has higher Wnv rate
temp$dayofyear = as.numeric(yday(temp$Date))
temp$PrecipTotal = as.numeric(as.character(temp$PrecipTotal))
temp$PrecipTotal[is.na(temp$PrecipTotal)] = 0
temp$WetBulb = as.numeric(as.character(temp$WetBulb))
temp$WetBulb[is.na(temp$WetBulb)] = 0
temp$StnPressure = as.numeric(as.character(temp$StnPressure))
temp$StnPressure[is.na(temp$StnPressure)] = 0
temp$AvgSpeed = as.numeric(as.character(temp$AvgSpeed))
temp$AvgSpeed[is.na(temp$AvgSpeed)] = 0
y = as.factor(temp$WnvPresent)
train.date = temp$Date
head(train)
train = temp[, c(4,5,9,10,11, 14:16, 18:21,28:37)]
train$Tavg = NULL
train$Heat = NULL
train$Cool = NULL
train$SeaLevel = NULL
y = as.factor(temp$WnvPresent)
train.date = temp$Date
n = nrow(train)
counts = n/table(y)
set.seed(999)
fitted = randomForest(train, y, ntree = 1500,classwt = counts ,importance = TRUE)
glmcv = function(train, y, yr = 2007, td = train.date){
holdout = train[year(td) ==yr, ]
holdout.y = y[year(td) ==yr]
train.cv = train[year(td) != yr,]
train.y = y[year(td) != yr]
w = ifelse(train.y == 1, 15, 1)
dd = data.frame(model.matrix(train.y ~., train.cv))
dd$y = train.y
fitted = glm(y ~ ., data = dd,family = binomial(), weights = w)
impute.train = train.cv[, c( 'week', 'Longitude', 'Latitude','Species')]
impute.train$Species = as.numeric(impute.train$Species)
impute.test = holdout[, c('week', 'Longitude', 'Latitude', 'Species')]
impute.test$Species = as.numeric(impute.test$Species)
impute.y = train.cv$NumMosquitos
## Tune K
knnmodel = knn.reg(train = impute.train, test = impute.test, y = impute.y,
k = 7)
holdout$NumMosquitos = knnmodel$pred
holdout = data.frame(model.matrix(~., holdout))
ypred = predict(fitted, newdata = holdout, type = 'response')
auc(roc(ypred, holdout.y))
}
glmcv(train, y)
head(train)
yr = 2007
head(train.date)
holdout = train[year(td) ==yr, ]
td = train.date
holdout = train[year(td) ==yr, ]
holdout.y = y[year(td) ==yr]
train.cv = train[year(td) != yr,]
train.y = y[year(td) != yr]
w = ifelse(train.y == 1, 15, 1)
dd = data.frame(model.matrix(train.y ~., train.cv))
dd$y = train.y
fitted = glm(y ~ ., data = dd,family = binomial(), weights = w)
impute.train = train.cv[, c( 'week', 'Longitude', 'Latitude','Species')]
impute.train$Species = as.numeric(impute.train$Species)
impute.test = holdout[, c('week', 'Longitude', 'Latitude', 'Species')]
impute.test$Species = as.numeric(impute.test$Species)
impute.y = train.cv$NumMosquitos
knnmodel = knn.reg(train = impute.train, test = impute.test, y = impute.y,
k = 7)
head(impute.train)
head(impute.test)
head(impute.y)
head(train.cv)
train = temp[, c('week', 'month','Species' ,'Latitude',
'Longitude', 'Tmax', 'Tmin', 'DewPoint',
'PrecipTotal' ,'StnPressure','AvgSpeed',
'ResultDir', 'WetBulb', "NumMosquitos")]
head(y)
holdout = train[year(td) ==yr, ]
holdout.y = y[year(td) ==yr]
train.cv = train[year(td) != yr,]
train.y = y[year(td) != yr]
w = ifelse(train.y == 1, 15, 1)
d2 = cbind(train.cv, train.y)
fitted = mgcv::gam(train.y ~ year + ti(Latitude, Longitude) + s(PrecipTotal) +
StnPressure + s(ResultSpeed) + s(ResultDir) +
s(Tmax) + s(Tmin) + s(NumMosquitos) + s(dayofyear) , data = d2,family = binomial(),
select = TRUE)
fitted = mgcv::gam(train.y ~ year + ti(Latitude, Longitude) + s(PrecipTotal) +
StnPressure + s(ResultDir) +
s(Tmax) + s(Tmin) + s(NumMosquitos) + s(dayofyear) , data = d2,family = binomial(),
select = TRUE)
fitted = mgcv::gam(train.y ~ year + ti(Latitude, Longitude) + s(PrecipTotal) +
StnPressure + s(ResultDir) +
s(Tmax) + s(Tmin) + s(NumMosquitos)  , data = d2,family = binomial(),
select = TRUE)
fitted = mgcv::gam(train.y ~  ti(Latitude, Longitude) + s(PrecipTotal) +
StnPressure + s(ResultDir) +
s(Tmax) + s(Tmin) + s(NumMosquitos)  , data = d2,family = binomial(),
select = TRUE)
holdout = train[year(td) ==yr, ]
holdout.y = y[year(td) ==yr]
train.cv = train[year(td) != yr,]
train.y = y[year(td) != yr]
w = ifelse(train.y == 1, 15, 1)
dd = data.frame(model.matrix(train.y ~., train.cv))
dd$y = train.y
fitted = glm(y ~ ., data = dd,family = binomial(), weights = w)
impute.train = train.cv[, c( 'week', 'Longitude', 'Latitude','Species')]
impute.train$Species = as.numeric(impute.train$Species)
impute.test = holdout[, c('week', 'Longitude', 'Latitude', 'Species')]
impute.test$Species = as.numeric(impute.test$Species)
impute.y = train.cv$NumMosquitos
head(impute.y)
knnmodel = knn.reg(train = impute.train, test = impute.test, y = impute.y,
k = 7)
holdout$NumMosquitos = knnmodel$pred
holdout = data.frame(model.matrix(~., holdout))
ypred = predict(fitted, newdata = holdout, type = 'response')
auc(roc(ypred, holdout.y))
yr = 2009
holdout = train[year(td) ==yr, ]
holdout.y = y[year(td) ==yr]
train.cv = train[year(td) != yr,]
train.y = y[year(td) != yr]
w = ifelse(train.y == 1, 15, 1)
dd = data.frame(model.matrix(train.y ~., train.cv))
dd$y = train.y
fitted = glm(y ~ ., data = dd,family = binomial(), weights = w)
impute.train = train.cv[, c( 'week', 'Longitude', 'Latitude','Species')]
impute.train$Species = as.numeric(impute.train$Species)
impute.test = holdout[, c('week', 'Longitude', 'Latitude', 'Species')]
impute.test$Species = as.numeric(impute.test$Species)
impute.y = train.cv$NumMosquitos
knnmodel = knn.reg(train = impute.train, test = impute.test, y = impute.y,
k = 7)
holdout$NumMosquitos = knnmodel$pred
holdout = data.frame(model.matrix(~., holdout))
ypred = predict(fitted, newdata = holdout, type = 'response')
auc(roc(ypred, holdout.y))
yr = 2011
holdout = train[year(td) ==yr, ]
holdout.y = y[year(td) ==yr]
train.cv = train[year(td) != yr,]
train.y = y[year(td) != yr]
w = ifelse(train.y == 1, 15, 1)
dd = data.frame(model.matrix(train.y ~., train.cv))
dd$y = train.y
fitted = glm(y ~ ., data = dd,family = binomial(), weights = w)
impute.train = train.cv[, c( 'week', 'Longitude', 'Latitude','Species')]
impute.train$Species = as.numeric(impute.train$Species)
impute.test = holdout[, c('week', 'Longitude', 'Latitude', 'Species')]
impute.test$Species = as.numeric(impute.test$Species)
impute.y = train.cv$NumMosquitos
knnmodel = knn.reg(train = impute.train, test = impute.test, y = impute.y,
k = 7)
holdout$NumMosquitos = knnmodel$pred
holdout = data.frame(model.matrix(~., holdout))
ypred = predict(fitted, newdata = holdout, type = 'response')
auc(roc(ypred, holdout.y))
